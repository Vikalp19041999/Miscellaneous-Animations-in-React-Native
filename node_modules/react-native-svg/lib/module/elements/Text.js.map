{"version":3,"sources":["Text.tsx"],"names":["React","extractText","extractProps","propsAndStyles","extractTransform","pickNotNil","Shape","RNSVGText","Text","setNativeProps","props","matrix","prop","root","x","y","ref","refMethod","displayName"],"mappings":"+zCAAA,MAAOA,CAAAA,KAAP,KAAiC,OAAjC,CACA,MAAOC,CAAAA,WAAP,KAAwB,4BAAxB,CACA,MAAOC,CAAAA,YAAP,EAAuBC,cAAvB,KAA6C,6BAA7C,CACA,MAAOC,CAAAA,gBAAP,KAA6B,iCAA7B,CAEA,OAASC,UAAT,KAA2B,aAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,SAAP,CACA,OAASC,SAAT,KAA0B,oBAA1B,C,GAEqBC,CAAAA,I,kWAGnBC,c,CAAiB,SACfC,KADe,CAKZ,CACH,GAAMC,CAAAA,MAAM,CAAGD,KAAK,EAAI,CAACA,KAAK,CAACC,MAAhB,EAA0BP,gBAAgB,CAACM,KAAD,CAAzD,CACA,GAAIC,MAAJ,CAAY,CACVD,KAAK,CAACC,MAAN,CAAeA,MAAf,CACD,CACD,GAAMC,CAAAA,IAAI,CAAGT,cAAc,CAACO,KAAD,CAA3B,CACA,SAAcE,IAAd,CAAoBP,UAAU,CAACJ,WAAW,CAACW,IAAD,CAAO,IAAP,CAAZ,CAA9B,EACA,MAAKC,IAAL,EAAa,MAAKA,IAAL,CAAUJ,cAAV,CAAyBG,IAAzB,CAAb,CACD,C,uEAEQ,CACP,GAAMA,CAAAA,IAAI,CAAGT,cAAc,CAAC,KAAKO,KAAN,CAA3B,CACA,GAAMA,CAAAA,KAAK,CAAGR,YAAY,kBAEnBU,IAFmB,EAGtBE,CAAC,CAAE,IAHmB,CAItBC,CAAC,CAAE,IAJmB,GAMxB,IANwB,CAA1B,CAQA,SAAcL,KAAd,CAAqBT,WAAW,CAACW,IAAD,CAAO,IAAP,CAAhC,EACAF,KAAK,CAACM,GAAN,CAAY,KAAKC,SAAjB,CACA,MAAO,qBAAC,SAAD,aAAeP,KAAf,mDAAP,CACD,C,kBA/B+BJ,K,EAAbE,I,CACZU,W,CAAc,M,QADFV,I","sourcesContent":["import React, { Component } from 'react';\nimport extractText from '../lib/extract/extractText';\nimport extractProps, { propsAndStyles } from '../lib/extract/extractProps';\nimport extractTransform from '../lib/extract/extractTransform';\nimport { TransformProps } from '../lib/extract/types';\nimport { pickNotNil } from '../lib/util';\nimport Shape from './Shape';\nimport './TSpan';\nimport { RNSVGText } from './NativeComponents';\n\nexport default class Text extends Shape<{}> {\n  static displayName = 'Text';\n\n  setNativeProps = (\n    props: Object & {\n      matrix?: number[];\n      style?: [] | {};\n    } & TransformProps,\n  ) => {\n    const matrix = props && !props.matrix && extractTransform(props);\n    if (matrix) {\n      props.matrix = matrix;\n    }\n    const prop = propsAndStyles(props);\n    Object.assign(prop, pickNotNil(extractText(prop, true)));\n    this.root && this.root.setNativeProps(prop);\n  };\n\n  render() {\n    const prop = propsAndStyles(this.props);\n    const props = extractProps(\n      {\n        ...prop,\n        x: null,\n        y: null,\n      },\n      this,\n    );\n    Object.assign(props, extractText(prop, true));\n    props.ref = this.refMethod as (instance: Component | null) => void;\n    return <RNSVGText {...props} />;\n  }\n}\n"]}