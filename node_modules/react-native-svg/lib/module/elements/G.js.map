{"version":3,"sources":["G.tsx"],"names":["React","extractProps","propsAndStyles","extractFont","extractTransform","Shape","RNSVGGroup","G","setNativeProps","props","matrix","root","prop","extractedProps","font","hasProps","refMethod","children","displayName","obj","_"],"mappings":"6dAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,EAAuBC,cAAvB,KAA6C,6BAA7C,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,iCAA7B,CAEA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,UAAT,KAA2B,oBAA3B,C,GAEqBC,CAAAA,C,sVAGnBC,c,CAAiB,SACfC,KADe,CAIZ,CACH,GAAMC,CAAAA,MAAM,CAAG,CAACD,KAAK,CAACC,MAAP,EAAiBN,gBAAgB,CAACK,KAAD,CAAhD,CACA,GAAIC,MAAJ,CAAY,CACVD,KAAK,CAACC,MAAN,CAAeA,MAAf,CACD,CACD,MAAKC,IAAL,EAAa,MAAKA,IAAL,CAAUH,cAAV,CAAyBC,KAAzB,CAAb,CACD,C,oEAEQ,IACCA,CAAAA,KADD,CACW,IADX,CACCA,KADD,CAEP,GAAMG,CAAAA,IAAI,CAAGV,cAAc,CAACO,KAAD,CAA3B,CACA,GAAMI,CAAAA,cAAc,CAAGZ,YAAY,CAACW,IAAD,CAAO,IAAP,CAAnC,CACA,GAAME,CAAAA,IAAI,CAAGX,WAAW,CAACS,IAAD,CAAxB,CACA,GAAIG,QAAQ,CAACD,IAAD,CAAZ,CAAoB,CAClBD,cAAc,CAACC,IAAf,CAAsBA,IAAtB,CACD,CACD,MACE,qBAAC,UAAD,WAAY,GAAG,CAAE,KAAKE,SAAtB,EAAqCH,cAArC,mDACGJ,KAAK,CAACQ,QADT,CADF,CAKD,C,eA5B+BZ,K,EAAbE,C,CACZW,W,CAAc,G,QADFX,C,aA+BrB,GAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACI,GAAD,CAAa,CAC5B,IAAK,GAAIC,CAAAA,CAAT,GAAcD,CAAAA,GAAd,CAAmB,CACjB,MAAO,KAAP,CACD,CACD,MAAO,MAAP,CACD,CALD","sourcesContent":["import React from 'react';\nimport extractProps, { propsAndStyles } from '../lib/extract/extractProps';\nimport { extractFont } from '../lib/extract/extractText';\nimport extractTransform from '../lib/extract/extractTransform';\nimport { TransformProps } from '../lib/extract/types';\nimport Shape from './Shape';\nimport { RNSVGGroup } from './NativeComponents';\n\nexport default class G<P> extends Shape<P> {\n  static displayName = 'G';\n\n  setNativeProps = (\n    props: Object & {\n      matrix?: number[];\n    } & TransformProps,\n  ) => {\n    const matrix = !props.matrix && extractTransform(props);\n    if (matrix) {\n      props.matrix = matrix;\n    }\n    this.root && this.root.setNativeProps(props);\n  };\n\n  render() {\n    const { props } = this;\n    const prop = propsAndStyles(props);\n    const extractedProps = extractProps(prop, this);\n    const font = extractFont(prop);\n    if (hasProps(font)) {\n      extractedProps.font = font;\n    }\n    return (\n      <RNSVGGroup ref={this.refMethod} {...extractedProps}>\n        {props.children}\n      </RNSVGGroup>\n    );\n  }\n}\n\nconst hasProps = (obj: {}) => {\n  for (let _ in obj) {\n    return true;\n  }\n  return false;\n};\n"]}